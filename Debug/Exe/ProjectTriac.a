;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Project_Triac
;Version : 1.0
;Date    : 7/19/2018
;Author  : Tran Minh Thuan
;Company : VM Machine
;Comments:
;Supported by: Nguyen Duc Quyen
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;Development:
;12-12-2018: Final version.     (OK)
;                + 2 Modes
;15-12-2018: Fix EEPROM Problem (OK)
;            -Change store place temp0 (0>2), temp1 (1>5)
;            -Change when save value (different -> save > pressed button -> save)
;17-12-2018: Fix EEPROM Problem (v2)
;            - Disarm interrupt before write to EEPROM
;5-18-2019: Fix EEPROM Problem (v3)
;            - Change the EEPROM library, using the internal eeprom library
;            - Autosave in main function after 30mins
;6-3-2019: Fix EEPROM Prolem (v4 - base on 15-12-2018 version)
;            - Using function
;            - Remove delay in Check_SW function
;            - Add delay in main loop
;(IF still not work using eeprom variable)
;7-10-2019: Fix EEPROM Problem (v5- using EEPROM variable)
;17-12-2019: Disable
;//Test Section///////////////////////
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <eeprom.h>
;#define SW_EMER     PINB.3
;#define SW_ON       PINC.3
;#define SW_EMER1    PIND.4
;#define SW_GIAM     PINC.5
;#define SW_TANG     PINC.4
;#define LED         PORTB.5
;#define SIGNAL      PORTB.1
;#define CLK         PORTC.2 //Chan 11 clock
;#define SDI         PORTC.0 //Chan 14 data
;#define STR         PORTC.1 //Chan 12 chot
;
;
;
;
;/* ------Cac dinh nghia ve chuong trinh va cac bien--------*/
;//-----------------------------------------------------------
;//Dinh nghia cac bien toan cuc
;unsigned int    T_delay=0;         //Tang 1 moi khi ngat timer0 (100us)
;unsigned int    T_Timer1=0;        //Tang 1 moi ngat timer1 de phuc vu kich B1
;unsigned int    T_shift_delay=0;   //Dich de ve diem 0
;unsigned char   Status=1;          //Vua bat nguon thi he thong se hoat dong
;unsigned char   Mode=0;
;unsigned char   count;
;unsigned char   count_temp0;
;unsigned char   count_temp1;
;unsigned char   MA_7SEG[10]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};

	.DSEG
;//Dinh nghia cac chuong trinh
;void INT0_INIT(void);                   //Khoi tao cho ngat ngoai
;void Timer_INIT(void);                  //Khoi tao thong so va ngat cho Timer0
;void GPIO_INIT(void);                   //Khoi tao cac input, output
;void Delay_100us(unsigned int Time);    //Delay 100us ung voi moi don vi
;void Display();                         //Hien thi gia tri ra 7segs
;void CheckSW(void);                     //Doc gia tri nut nhan
;void Power_Check(void);                 //Check nut nhan nguon
;int Wait_Shift(void);                   //Doi de shift toi muc 0
;void Disable_INT(void);
;void Enable_INT(void);
;void EEPROM_Write(unsigned int addr, unsigned char data);
;unsigned char EEPROM_Read(unsigned int addr);
;/*---------------------Interrupt Service Routine-----------*/
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0056 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0057 //    60us - 65055,
; 0000 0058 //    65   - 65015, shift 47 - Lighter   - In use 12/8/2018
; 0000 0059 //    70us - 64975, shift 36 - Stronger
; 0000 005A //MAX 80us - 64895, shift 20 - Super strong
; 0000 005B 
; 0000 005C     // Reinitialize Timer1 value
; 0000 005D     TCNT1H=65015 >> 8;                 //FFB0-80us - (2^16-80)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 005E     TCNT1L=65015 & 0xFF;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 005F     //------------------------------------------------------//
; 0000 0060     T_shift_delay++;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0061     if (Wait_Shift()==1)
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0062     {
; 0000 0063         if((99-count)==0) DDRB&=~0x02;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0064         else
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0065         {
; 0000 0066         if(T_Timer1>=count)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0067         {
; 0000 0068             SIGNAL=1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0069         }
; 0000 006A         T_Timer1++;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 006B         }
;PCODE: $0000002E VOL: 0
; 0000 006C     }
; 0000 006D };
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;////////////////////////////////////////////////////////////////                                                         ...
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0070 {// External Interrupt 0 service routine
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0071     //Reset count value
; 0000 0072     SIGNAL=0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0073     T_shift_delay=0;
;PCODE: $00000037 VOL: 0
; 0000 0074     T_Timer1=0;
;PCODE: $00000038 VOL: 0
; 0000 0075     if(LED==1)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0076     {
; 0000 0077          TIMSK&=(~0x04);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0078          SIGNAL=0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0079     }
; 0000 007A     else if (LED==0)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 007B     {
; 0000 007C         TIMSK|=0x04;                        //Enable Timer1 Overflow interrupt
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 007D         // Reinitialize Timer1 value
; 0000 007E         TCNT1H=65015 >> 8;                 //80us - (2^16-80)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 007F         TCNT1L=65015 & 0xFF;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0080     }
; 0000 0081 }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;////////////////////////////////////////////////////////////////
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0084 {
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0085     /*---------- Timer0 Overflow ISR------------------------------
; 0000 0086     // First Reinitialize timer0 value
; 0000 0087     // Increase count (T_delay) value
; 0000 0088     */
; 0000 0089     TCNT0=0x9D;    //Tinh toan = 0x9D(100), nhung bu sai so nen A0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 008A     T_delay++;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008B     //------------------------------------------------------//
; 0000 008C };
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;/*----------------------------------------------*/
;void main(void)
; 0000 008F {
;PCODE: $0000005C VOL: 0
; 0000 0090 count_temp0 = EEPROM_Read(200);   //Load value from EEPROM
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0091 count_temp1 = EEPROM_Read(210);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0092 GPIO_INIT();
;PCODE: $00000065 VOL: 0
; 0000 0093 Timer_INIT();
;PCODE: $00000066 VOL: 0
; 0000 0094 INT0_INIT();
;PCODE: $00000067 VOL: 0
; 0000 0095 SIGNAL=0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0096 #asm("sei")
;PCODE: $0000006A VOL: 0
	sei
;PCODE: $0000006B VOL: 0
; 0000 0097 while (1)
;PCODE: $0000006C VOL: 0
; 0000 0098       {
; 0000 0099         unsigned char i=0;
; 0000 009A         for(i=0;i<50;i++)
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;	i -> Y+0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 009B         {
; 0000 009C             Power_Check();
;PCODE: $0000007A VOL: 0
; 0000 009D             Display();
;PCODE: $0000007B VOL: 0
; 0000 009E         }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 009F         CheckSW();
;PCODE: $00000082 VOL: 0
; 0000 00A0       }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00A1 };
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;/*--------------Cac chuong trinh con--------------------*/
;void INT0_INIT(void)     //TEST DONE
; 0000 00A4 {
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00A5     // External Interrupt(s) initialization
; 0000 00A6     // INT0: On
; 0000 00A7     // INT0 Mode: Rising Edge
; 0000 00A8     // INT1: Off
; 0000 00A9     GICR|=(0<<INT1) | (1<<INT0);                                //Enable interrupt
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00AA     MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);    //Rising edge
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00AB     GIFR=(0<<INTF1) | (1<<INTF0);                               //Clear the flag
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00AC };
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;//////////////////////////////////////////////////////////
;void EEPROM_Write(unsigned int addr, unsigned char data)
; 0000 00AF {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B0     #asm("cli");
;PCODE: $00000096 VOL: 0
;	addr -> Y+1
;	data -> Y+0
;PCODE: $00000097 VOL: 0
	cli
;PCODE: $00000098 VOL: 0
; 0000 00B1     while(EECR.1==1);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B2     EEAR = addr;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B3     EEDR = data;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B4     EECR.2 = 1;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00B5     EECR.1 = 1;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00B6     #asm("sei");
;PCODE: $000000A7 VOL: 0
	sei
;PCODE: $000000A8 VOL: 0
; 0000 00B7 }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;//////////////////////////////////////////////////////////
;unsigned char EEPROM_Read(unsigned int addr)
; 0000 00BA {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00BB     #asm("cli");
;PCODE: $000000AE VOL: 0
;	addr -> Y+0
;PCODE: $000000AF VOL: 0
	cli
;PCODE: $000000B0 VOL: 0
; 0000 00BC     while(EECR.1);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00BD     EEAR = addr;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00BE     EECR.0 = 1;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00BF     return EEDR;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00C0     #asm("sei");
;PCODE: $000000BE VOL: 0
	sei
;PCODE: $000000BF VOL: 0
; 0000 00C1 }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;//////////////////////////////////////////////////////////
;void Timer_INIT(void)    //TEST DONE
; 0000 00C4 {
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00C5 //----------------Timer0--------------------------------//
; 0000 00C6     // Timer/Counter 0 initialization
; 0000 00C7     // Clock source: System Clock
; 0000 00C8     // Clock value: 8000.000 kHz
; 0000 00C9     // Prescaler: 8
; 0000 00CA     TCCR0=(0<<CS02) | (1<<CS01) | (0<<CS00);  //Prescaler - 8
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00CB     TCNT0=0x9D;                               // 100us
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00CC //----------------Timer1--------------------------------//
; 0000 00CD     // Timer/Counter 1 initialization
; 0000 00CE     // Clock source: System Clock
; 0000 00CF     // Clock value: 8000.000 kHz
; 0000 00D0     // Mode: Normal top=0xFFFF
; 0000 00D1     // OC1A output: Disconnected
; 0000 00D2     // OC1B output: Disconnected
; 0000 00D3     // Noise Canceler: Off
; 0000 00D4     // Input Capture on Falling Edge
; 0000 00D5     // Timer Period: 0.8 ms
; 0000 00D6     // Timer1 Overflow Interrupt: On
; 0000 00D7     // Input Capture Interrupt: Off
; 0000 00D8     // Compare A Match Interrupt: Off
; 0000 00D9     // Compare B Match Interrupt: Off
; 0000 00DA     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00DB     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00DC     TCNT1H=0xFE20 >> 8;                 //80us - (2^16-80)
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00DD     TCNT1L=0xFE20 & 0xff;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00DE     ICR1H=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00DF     ICR1L=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00E0     OCR1AH=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00E1     OCR1AL=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00E2     OCR1BH=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00E3     OCR1BL=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00E4 };
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;///////////////////////////////////////////////////////////
;void GPIO_INIT(void)     //TEST DONE
; 0000 00E7 {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00E8     // Input/Output Ports initialization
; 0000 00E9     // Port B initialization
; 0000 00EA     // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 00EB     DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00EC     // State: Bit7=T Bit6=T Bit5=1 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
; 0000 00ED     PORTB=(0<<PORTB7) | (0<<PORTB6) | (1<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00EE     // Port C initialization
; 0000 00EF     // Function: Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 00F0     DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00F1     // State: Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 00F2     PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00F3     DDRD=0x00;    // Cac chan cua PORTD la cac chan INPUT
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00F4     PORTD=0xFF;    // Co tro noi keo len cho chan 5,6,7
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00F5 };
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;///////////////////////////////////////////////////////////
;int Wait_Shift(void)     //TEST DONE
; 0000 00F8 {
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F9     if(T_shift_delay>=47)           //sau 8*80us ve diem 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00FA     return 1;                       //Ve diem 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00FB     else                            //Chua ve diem 0
;PCODE: $000000F6 VOL: 0
; 0000 00FC     return 0;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00FD };
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;///////////////////////////////////////////////////////////
;void Delay_100us(unsigned int Time)  //TEST DONE
; 0000 0100 {
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0101 /* Create delay function with 100us corresponding to each value */
; 0000 0102     TCNT0=0x9D;         //Tinh toan = 0x9D, nhung bu sai so nen A0
;PCODE: $000000FE VOL: 0
;	Time -> Y+0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0103     TIMSK|=0x01;        //Cho phep ngat tran timer0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0104     T_delay=0;          //Reset gia tri dem
;PCODE: $00000104 VOL: 0
; 0000 0105     while(T_delay<Time);//Chua du
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0106     TIMSK&=~0x01;       //Du thoi gian, tat ngat tran timer0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0107 };
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;///////////////////////////////////////////////////////////
;void CheckSW(void)  //TEST DONE
; 0000 010A {
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 010B     if(Mode==1)
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 010C     {
; 0000 010D         if(!SW_GIAM)
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 010E         {
; 0000 010F             if(count_temp1>0)       count_temp1--;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0110             else                    count_temp1=0;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0111             Delay_100us(2000);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0112             Disable_INT();
;PCODE: $00000126 VOL: 0
; 0000 0113             #asm("cli");
;PCODE: $00000127 VOL: 0
	cli
;PCODE: $00000128 VOL: 0
; 0000 0114             EEPROM_Write(210,count_temp1);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0115             Enable_INT();
;PCODE: $0000012D VOL: 0
; 0000 0116             #asm("sei");
;PCODE: $0000012E VOL: 0
	sei
;PCODE: $0000012F VOL: 0
; 0000 0117 
; 0000 0118 		}
; 0000 0119         if(!SW_TANG)
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 011A         {
; 0000 011B             if(count_temp1<99)      count_temp1++;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 011C             else                    count_temp1=99;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 011D             Delay_100us(2000);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 011E             Disable_INT();
;PCODE: $00000141 VOL: 0
; 0000 011F             #asm("cli");
;PCODE: $00000142 VOL: 0
	cli
;PCODE: $00000143 VOL: 0
; 0000 0120             EEPROM_Write(210,count_temp1);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0121             Enable_INT();
;PCODE: $00000148 VOL: 0
; 0000 0122             #asm("sei");
;PCODE: $00000149 VOL: 0
	sei
;PCODE: $0000014A VOL: 0
; 0000 0123 
; 0000 0124         }
; 0000 0125     }
;PCODE: $0000014B VOL: 0
; 0000 0126     if(Mode==0)
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0127     {
; 0000 0128         if(!SW_GIAM)
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0129         {
; 0000 012A             if(count_temp0>0)       count_temp0--;     //Store count in EEPROM, EEPROM have only 100,000 write
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 012B             else                    count_temp0=0;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 012C             Delay_100us(2000);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 012D             Disable_INT();
;PCODE: $0000015C VOL: 0
; 0000 012E             #asm("cli");
;PCODE: $0000015D VOL: 0
	cli
;PCODE: $0000015E VOL: 0
; 0000 012F             EEPROM_Write(200,count_temp0);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0130             Enable_INT();
;PCODE: $00000163 VOL: 0
; 0000 0131             #asm("sei");
;PCODE: $00000164 VOL: 0
	sei
;PCODE: $00000165 VOL: 0
; 0000 0132         }
; 0000 0133         if(!SW_TANG)
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0134         {
; 0000 0135             if(count_temp0<99)      count_temp0++;     //Store count in EEPROM, EEPROM have only 100,000 write
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0136             else                    count_temp0=99;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0137             Delay_100us(2000);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0138             Disable_INT();
;PCODE: $00000175 VOL: 0
; 0000 0139             #asm("cli");
;PCODE: $00000176 VOL: 0
	cli
;PCODE: $00000177 VOL: 0
; 0000 013A             EEPROM_Write(200,count_temp0);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 013B             Enable_INT();
;PCODE: $0000017C VOL: 0
; 0000 013C             #asm("sei");
;PCODE: $0000017D VOL: 0
	sei
;PCODE: $0000017E VOL: 0
; 0000 013D 
; 0000 013E         }
; 0000 013F 
; 0000 0140     }
;PCODE: $0000017F VOL: 0
; 0000 0141     if(Mode==0) count=count_temp0;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0142     if(Mode==1) count=count_temp1;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0143 }
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;///////////////////////////////////////////////////////////
;void Display()  //TEST DONE
; 0000 0146 {
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0147     unsigned char i,Q;
; 0000 0148     unsigned char Dvi,Chuc;
; 0000 0149     Dvi=MA_7SEG[(99-count)%10];
;PCODE: $00000190 VOL: 0
;	i -> R17
;	Q -> R16
;	Dvi -> R19
;	Chuc -> R18
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 014A     Chuc=MA_7SEG[(99-count)/10];
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 014B     Q=Dvi; for(i=0;i<8;i++){SDI=Q&0x80;CLK=0;CLK=1;Q<<=1;}
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 014C     Q=Chuc; for(i=0;i<8;i++){SDI=Q&0x80;CLK=0;CLK=1;Q<<=1;}
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 014D     STR=0; STR=1;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 014E }
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;///////////////////////////////////////////////////////////
;void Disable_INT(void)
; 0000 0151 {
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0152     GICR|=(0<<INT1) | (0<<INT0);                                //Disable external interrupt
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0153     TIMSK&=~(0x05);                                             //Disable timer interrupts
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0154 }
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;///////////////////////////////////////////////////////////
;void Enable_INT(void)
; 0000 0157 {
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0158     GICR|=(0<<INT1) | (1<<INT0);                                //Enable interrupt
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0159     TIMSK|=(0x05);                                             //Disable timer interrupts
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 015A }
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;///////////////////////////////////////////////////////////
;void Power_Check(void) //Test done
; 0000 015D {
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 015E /* Check the power button to allow system operating normally
; 0000 015F SW_EMER - Emergency switch if this button was switched on (=0), lock the output signal
; 0000 0160 SW_ON - On/Off button, if this button was pressed toggle on/off the output signal
; 0000 0161 Status =0 -> Signal was disable
; 0000 0162 Status = 1 -> Signal was enable
; 0000 0163 */
; 0000 0164     if((SW_EMER==0)&&(SW_EMER1==1))
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0165     {
; 0000 0166         Mode=0;   //Mode 0
;PCODE: $00000207 VOL: 0
; 0000 0167     }
; 0000 0168     if((SW_EMER==0)&&(SW_EMER1==0))
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0169     {
; 0000 016A         Mode=1;   //Mode 1
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 016B     }
; 0000 016C     if(SW_EMER==1)                          //LOCK
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 016D     {
; 0000 016E             Status=0;                       //Signal disable
;PCODE: $00000219 VOL: 0
; 0000 016F             Delay_100us(50);                //Wait for bound
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0170             if(SW_EMER==0)                  //UNLOCK
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0171             Status=1;                       //Signal enable
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0172     }
;PCODE: $00000222 VOL: 0
; 0000 0173     else
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0174     {
; 0000 0175             if(SW_ON==0)                    //Switch press toggle the power
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0176             {
; 0000 0177                     Status=(Status+1)%2;    //Toggle
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0178                     Delay_100us(5000);      //Wait for bound
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0179             }
; 0000 017A     }
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 017B     if(Status==1) {LED=0; DDRB|=0x02;}      //System ON, on LED and enable SIGNAL
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 017C     else          {LED=1; DDRB&=~0x02;}     //System OFF, Off LED and disable SIGNAL
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 017D }
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;/*--------------------------------------------------------*/
